To solve this first I download the folder and run docker on it. The compose.yml's content tells me that I can access the web app from port 8888 of localhost so I tried something like going to the web app using a browser, or curl it. I can not find any input field so i suspected that this is not an SQL injection challenge.

Recall some online courses I took regarding web exploitation I tried to access some subdomain like /ftp or /robots.txt but nothing really meaningful can be found. I recall the compose.yml in the environment field there is an ADMIN_PASSWORD and the flag BKSEC{REDACTED}. So I think maybe I can use the password for something. I researched a long while there are actually other subdomain like /login, /secret. So I test if there actually is such a subdomain in the web.

I don't have much experience in dealing with web app so I ask grok to write me a request to /login. At first try it return 400 Bad Request, and {"msg": "received invalid json"} so it is clear that there is a /login (otherwise it should have been 404 Not Found). I tried to login using json format for a few time and managed to logged in and I was given a JWT. I researched an figured the JWT can help me access different endpoints of the web app.

So I ask grok to write me a bash code to help me access /secret, and I found that the flag is located in /secret.

Now I tried the same things on the official instance of the web app. Things were different this time, the I did not have the password of the admin so I can not login immediately so I had to register with a new user account, after registering (adding a full_name field as the message of the /register suggested) and login, I got a JWT like before. First thing I tried is going to /secret but it seems like this user account does not have a secret so it seems like the secret only available for admin account, so I have to got the admin account somehow. using the JWT I wandered to some other endpoints such as /protected, /profile, /profile/1, /secret/1, /.well-known/jwks.json, I got the admin's username in /profile/1, and something called "key" in the /.well-known/jwks.json. I ask grok and it turned out that the key here is the private RSA key used to sign and create the JWT. Which means I can forge a JWT with the to access the endpoints that only available for admin.

After researching, to forge the JWT I needed two things, the payload, and the private key. I got the private key so I only need the payload. So I come back and decode the JWT I've been using, and figured out how the payload of the admin's JWT should look like. Then I create a python code that can help me forge the JWT. Took a long time to fix bugs but the forged JWT worked in the end and I used it to get to get the flag in /secret.  